#!/usr/bin/ruby
require 'thor'
require 'mail'
require 'json'

def lookup id
    file = File.read('contacts.json')
    contacts = JSON.parse(file)
    contacts.key?(id) ? contacts[id] : id
end

class SendFile < Thor
    
    desc "installs this program", "create an alias to this program to the Directory you chose"
    def install file
        
    end
    
    desc "add_contact [NAME] [VALUE]", "adds the contact NAME, to corespond with the [VALUE] addres in your book"
    def add_contact name, value
        file = File.read('contacts.json')
        contacts = JSON.parse(file)
        contacts[name] = value
        File.write('contacts.json', contacts.to_json)
    end
        
    desc "i", "Interactive chose a file and send it to a user or users of your choice"
    def i
        target = lookup ask "Who would you like to send this to: "
        file   = ask "What file would you like to include"
        
        Mail.deliver do 
            from     'system.lab@marquette.edu'
            to       target
            subject  'File Share'
            body     "#{ENV['USER']} Wants you to have this."
            add_file file
        end
        
        say "Mail Sent Succesfully!", "\e[32m"
    end	
    
    desc "send [FILE] [ADDRESS]", "Emails the FILE, to the ADDRESS. If address has a entry in contacts it is changed to that."
    long_desc <<-LONGDESC
    Sends a email to the ADDRESS that is supplied, this email has the FILE attached to it.
    LONGDESC
    option :message
    option :subject, :default => "Auto email with atachment"
    option :yell => :boolean, :default => false
    def send(file, address)
        
        recipiant = lookup address
        
        bodyMessage = "#{ENV['USER']} Wants you to have this."
        bodyMessage += options[:message] if options[:message]
        
        newSubject = options[:subject] ? options[:subject] : "Have this file"
        
        output =  []
        output << "to:      #{recipiant}" 
        output << "file:    #{file}"
        output << "message: #{options[:message]}" if options[:message]
        output << "subject: #{options[:subject]}" if options[:subject]
        output = output.join("\n")
        puts options[:yell] ? output.upcase : output

        Mail.deliver do
            from     'system.lab@marquette.edu'
            to       recipiant
            subject  newSubject
            body     bodyMessage
            add_file file
        end
        
        say "Mail Sent Succesfully!", "\e[32m"
    end
end

SendFile.start(ARGV)
