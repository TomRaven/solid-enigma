#!/usr/bin/ruby
require 'thor'
require 'mail'
require 'json'
require_relative 'contact.rb'

# Main CLI for this entire project
class Share < Thor
    
    desc "test", "this command is only used for debugging plaese ignore"
    def test
       say fish 
    end
    
    desc "logon", "This command is automatically called when you login"
    def logon
    end
        
       
    desc "install", "create an alias to this program to the Directory you chose"
    option :hard, :type => :boolean, :default => false     
    def install
        
        if options[:hard]
                system "rm ~/bin/share"
                system "rm -rf ~/Inbox/"
        end

        system "ln -s $PWD/share ~/bin/"
        system "mkdir ~/Inbox/"
        system "mkdir ~/Inbox/.friends"
        system "mkdir ~/Inbox/.config"
        system "touch ~/Inbox/.config/contacts.json"
        system "echo \"{}\" > ~/Inbox/.config/contacts.json"
    end

    desc "add_contact [NAME] [VALUE]", "adds the contact NAME, to corespond with the [VALUE] addres in your book"
    def add_contact name, value
        file = File.read(getContactBook)
        contacts = JSON.parse(file)
        contacts[name] = value
        File.write(getContactBook, contacts.to_json)
    end
    
    desc "i_email", "Interactive chose a file and email it to a user or users of your choice"
    def i
        target = lookup ask "Who would you like to send this to: "
        file   = ask "What file would you like to include"
        
        Mail.deliver do 
            from     'system.lab@marquette.edu'
            to       target
            subject  'File Share'
            body     "#{ENV['USER']} Wants you to have this."
            add_file file
        end        
        say "Mail Sent Succesfully!", "\e[32m"
    end	
    
    desc "email [FILE] [ADDRESS]", "Emails the FILE, to the ADDRESS. If address has a entry in contacts it is changed to that."
    option :message, :aliases => "-m"
    option :test, :type => :boolean, :aliases => "-t", :default => false
    option :subject, :default => "Auto email with atachment", :aliases => "-s"
    option :yell, :type => :boolean, :default => false, :aliases => "-y"
    def email(file, address)
        recipiant = address.split(',').map {|i| lookup i}
        
        bodyMessage = "#{ENV['USER']} Wants you to have this."
        bodyMessage += "\n\n" + options[:message] if options[:message]
        
        newSubject = options[:subject]
        
        output =  []
        output << "to:      #{recipiant}" 
        output << "file:    #{file}"
        output << "message: #{options[:message]}" if options[:message]
        output << "subject: #{options[:subject]}" if options[:subject]
        output = output.join("\n")
        puts options[:yell] ? output.upcase : output
        
        if !options[:test]
            begin
                Mail.deliver do
                    from     'system.lab@marquette.edu'
                    to       recipiant
                    subject  newSubject
                    body     bodyMessage
                    add_file file
                end
                say "Mail Sent Succesfully!", "\e[32m"
            rescue
                say "Message Failed to send try agin", :red
            end
        else
           say "Message Not Sent, Program was run in test mode. remove -t flag", :red
        end
    end
end

Share.start(ARGV)

